// https://www.shadertoy.com/view/NldSzM
// Gold Edifices
#version 330
uniform float iTime;
uniform float iDate;
uniform int iFrame;
uniform vec2 iResolution;
uniform vec4 iMouse;
out vec4 fragColor;
uniform sampler2D iChannel0;
#define fragCoord gl_FragCoord.xy

// "Gold Edifices" by dr2 - 2021
// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License

// Auric architecture (based on "Edible Edifices")

#define AA  0  // (= 0/1) optional antialiasing

#if 0
#define VAR_ZERO min (iFrame, 0)
#else
#define VAR_ZERO 0
#endif

float PrBoxDf (vec3 p, vec3 b);
float PrRoundBoxDf (vec3 p, vec3 b, float r);
float PrRoundBox2Df (vec2 p, vec2 b, float r);
float PrSphDf (vec3 p, float r);
float PrCylDf (vec3 p, float r, float h);
float PrCylAnDf (vec3 p, float r, float w, float h);
float PrRoundCylDf (vec3 p, float r, float rt, float h);
float PrCapsDf (vec3 p, float r, float h);
vec2 PixToHex (vec2 p);
vec2 HexToPix (vec2 h);
float Minv3 (vec3 p);
float Maxv3 (vec3 p);
float SmoothMin (float a, float b, float r);
float SmoothMax (float a, float b, float r);
mat3 StdVuMat (float el, float az);
vec2 Rot2D (vec2 q, float a);
vec2 Rot2Cs (vec2 q, vec2 cs);
vec2 Hashv2v2 (vec2 p);
float Fbm2 (vec2 p);
vec3 VaryNf (vec3 p, vec3 n, float f);

vec3 qHit, ltDir;
vec2 gId, trkF, trkA, bldCs;
float tCur, dstFar, hgSize, wavHt, emFrac, grRad, pR, pA, bldTp, rc;
int idObj;
bool isOcc, isSh;
const float pi = 3.1415927, sqrt2 = 1.41421, sqrt3 = 1.7320508;

#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }

float CasBldgDf (vec3 p, float dMin)
{
  vec3 q, qq;
  float d, a;
  q = p;
  q.xz = Rot2D (q.xz, 2. * pi * (floor (4. * (pA - 0.5) + 0.5) / 4.));
  qq = q;
  q.xy -= vec2 (-5., 1.2);
  d = PrRoundBoxDf (q, vec3 (0.15, 1.2 + rc, 5.) - rc, rc);
  d = max (d, - PrRoundBox2Df (vec2 (q.y - 1.2, mod (q.z + 0.25, 0.5) - 0.25), vec2 (0.2, 0.1), rc));
  d = max (d, - PrRoundBox2Df (vec2 (q.yz - vec2 (-0.6, 0.)), vec2 (0.6, 0.4), rc));
  dMin = min (dMin, d);
  q.z = abs (q.z) - 5.;
  q.y -= 0.2;
  d = min (PrCylAnDf (q.xzy, 0.45, 0.05, 1.2 + 0.2), PrCylDf (q.xzy, 0.4, 1.2));
  dMin = min (dMin, d);
  q = qq;
  q.xy -= vec2 (-2., 2.);
  d = max (max (q.y - 1.8 - 0.3 * q.x, - q.x), - p.y);
  dMin = min (dMin, d);
  d = PrRoundBoxDf (q, vec3 (0.15, 2.2 + rc, 2.) - rc, rc);
  d = max (d, - PrRoundBox2Df (vec2 (q.y - 2.2, mod (q.z + 0.25, 0.5) - 0.25), vec2 (0.2, 0.1), rc));
  dMin = min (dMin, d);
  q.z = abs (q.z) - 2.;
  d = PrCylDf (q.xzy, 0.3, 2.3);
  dMin = min (dMin, d);
  return 0.9 * dMin;
}

float TwrBldgDf (vec3 p, float dMin)
{
  vec3 q;
  float d;
  q = p;
  q.y -= 3.5 - rc;
  d = PrRoundBoxDf (q, vec3 (vec2 (1.3) * (1. - 0.05 * q.y), 3.5).xzy - rc, rc);
  q.xz = Rot2D (q.xz, 2. * pi * (floor (4. * (pA - 0.5) + 0.5) / 4.));
  q.xy -= vec2 (-4., -1.);
  d = min (d, PrRoundCylDf (q.xzy, 0.8 * (1. - 0.05 * q.y) - rc, rc, 2.5 - rc));
  q.x -= 1.7;
  d = min (d, PrRoundBoxDf (vec3 (q.xz, q.y - 0.8 + 0.2 * q.x * q.x).xzy, vec3 (2., 0.4, 0.1), rc));
  q.z = abs (q.z);
  q -= vec3 (-2.5, -1., 1.1);
  d = min (d, PrRoundCylDf (q.xzy, 0.7 * (1. - 0.05 * q.y)- rc, rc, 1.5 - rc));
  dMin = min (dMin, d);
  return 0.9 * dMin;
}

float PyrBldgDf (vec3 p, float dMin)
{
  vec3 q;
  float d;
  q = p;
  q.xz = Rot2D (q.xz, 2. * pi * (floor (4. * (pA - 0.5) + 0.5) / 4.));
  q.xy -= vec2 (-3.5, 2.);
  d = max (max (abs (q.y) - 2., - q.x + q.y), min (0.4 - abs (abs (q.z) - 0.6), (q.y - q.x + 0.18 -
     abs (mod (q.x + q.y - 0.02, 0.4) - 0.2) / sqrt2)));
  dMin = min (dMin, d);
  q = p;
  q.y -= 4.2;
  d = PrCylAnDf (q.xzy, 0.5, 0.05, 0.2);
  dMin = min (dMin, d);
  return 0.5 * dMin;
}

float TajBldgDf (vec3 p, float dMin)
{
  vec3 q;
  float d;
  q = p;
  d = PrRoundBoxDf (q, vec3 (5.8, 0.1, 5.8) - rc, rc);
  dMin = min (dMin, d);
  q.xz = Rot2D (q.xz, 2. * pi * (floor (8. * (pA - 0.5) + 0.5) / 8.));
  q.xy -= vec2 (-3.5, 2.);
  d = abs (q.y) - 2.;
  q.y = mod (q.y + 0.4, 2.) - 1.;
  q.z = abs (q.z) - 0.6;
  d = max (d, max (- q.x, - max (PrCapsDf ((q - vec3 (0., -0.5, 0.)).xzy, 0.4, 1.), - q.y - 0.2)));
  dMin = min (dMin, d);
  q = p;
  q.xz = Rot2D (q.xz, 2. * pi * (floor (4. * (pA - 0.5) + 0.5) / 4.));
  q.z = abs (q.z);
  q -= vec3 (-5., 3.1, 5.);
  d = PrCylDf (q.xzy, 0.3 - 0.1 * q.y / 3., 3.);
  dMin = min (dMin, d);
  q.y -= 3.2;
  d = PrSphDf (q, 0.3);
  dMin = min (dMin, d);
  q = p;
  q.y -= 4.6;
  d = PrSphDf (q, 2.);
  dMin = min (dMin, d);
  return 0.9 * dMin;
}

float PisBldgDf (vec3 p, float dMin)
{
  vec3 q;
  float d, ht, dh, a, ai, nf, na;
  nf = 8.;
  na = 12.;
  ht = 3.5;
  q = p;
  d = PrCylDf (q.xzy, 3., 0.05);
  dMin = min (dMin, d);
  q.xz = Rot2D (q.xz, pi / 4.);
  q.y -= ht + 0.05;
  q.xy = Rot2D (q.xy, 0.025 * pi);
  a = atan (q.z, - q.x) / (2. * pi) + 0.5;
  d = PrCylDf (q.xzy, 1., ht);
  dh = abs (q.y) - ht * (1. + 1. / (4. * nf));
  q.y = mod (q.y + ht / nf, 2. * ht / nf) - ht / nf;
  d = min (d, max (dh, PrRoundCylDf (q.xzy, 1.2 - rc, rc, ht / (4. * nf) - rc)));
  ai = floor (na * (a - 0.5) + 0.5) / na;
  q.xz = Rot2D (q.xz, 2. * pi * ai);
  q.y = abs (q.y) - ht / nf;
  d = max (d, - PrRoundBoxDf (vec3 (length (q.xz) - 1., q.y, 2. * pi * (abs (a - ai - 0.5) - 0.5 / na)),
     vec3 (0.2, 0.55 * ht / nf, 0.12) - rc, rc));
  q.x -= -1.05;
  d = min (d, max (dh, PrCylDf (q.xzy, 0.08, ht / nf)));
  dMin = min (dMin, d);
  q = p;
  q.y -= 0.4;
  d = PrRoundBox2Df (vec2 (pR - 6.5, abs (q.y) - 0.4), vec2 (0.25, 0.01), rc);
  q.xz = Rot2D (q.xz, 2. * pi * (floor (64. * (pA - 0.5) + 0.5) / 64.));
  q.x = abs (q.x + 6.5) - 0.15;
  d = min (d, PrCylDf (q.xzy, 0.08, 0.4));
  dMin = min (dMin, d);
  return 0.9 * dMin;
}

float FrtBldgDf (vec3 p, float dMin)
{
  vec3 q;
  float d, r;
  q = p;
  q.xz = Rot2D (q.xz, 2. * pi * (floor (5. * (pA - 0.5) + 0.5) / 5.));
  q.xy -= vec2 (-2., 1.4);
  d = max (max (- q.x, abs (q.y) - 1.4), - PrRoundBoxDf (vec3 (q.x, abs (q.y) - 0.5,
     mod (q.z + 0.5, 1.) - 0.5), vec3 (0.1, 0.2, 0.15), rc));
  d = min (d, PrRoundBox2Df (vec2 (q.x - 2., q.y - 1.4 - 0.3 * q.x), vec2 (2.2, 0.06) - rc, rc));
  dMin = min (dMin, d);
  q.xy -= vec2 (-3.5, -0.6);
  d = max (max (abs (q.x) - 0.4, abs (q.y) - 0.8),
     - PrRoundBox2Df (vec2 (q.yz - vec2 (-0.2, 0.)), vec2 (0.4, 0.3), rc));
  d = min (d, PrRoundBox2Df (vec2 (q.x, q.y - 0.9 + 0.4 * abs (q.x)), vec2 (0.6, 0.06) - rc, rc));
  dMin = min (dMin, d);
  q.y -= 0.3;
  q.z = abs (q.z) - 5.5 * tan (pi / 5.);
  d = PrCylDf (q.xzy, 0.8, 1.1);
  r = 0.2 * length (q.xz);
  q.y -= 1.4 - r;
  d = min (d, PrCylDf (q.xzy, 1.1, 0.3 - r));
  dMin = min (dMin, d);
  return 0.9 * dMin;
}

float WvnBldgDf (vec3 p, float dMin)
{
  vec3 q;
  float d, rs, s, h, f, yy;
  h = 2.5;
  rs = 0.15;
  q = p;
  q.y -= h + rs;
  f = q.y / h - 1.;
  yy = abs (q.y) - h;
  d = max (pR - 2.3 - 0.7 * f * f, yy);
  q.xz *= 1.4 + 0.4 * f;
  q.xz = vec2 (20. * pA, length (q.xz) - 10. / pi);
  d = min (d, length (vec2 (yy, q.z)) - 2. * rs);
  s = 0.4 * rs * cos (2. * pi * q.x);
  d = min (d, max (min (length (vec2 ((mod ((q.x + q.y) + 0.5, 1.) - 0.5) / sqrt2, q.z + s)),
     length (vec2 ((mod ((q.x - q.y) + 0.5, 1.) - 0.5) / sqrt2, q.z - s))) - rs, yy));
  dMin = min (dMin, d);
  return 0.5 * dMin;
}

float PstBldgDf (vec3 p, float dMin)
{
  vec3 q;
  float d, s, ss;
  s = 1.7;
  q = p;
  q.xz = Rot2D (q.xz, 0.25 * pi);
  for (int j = VAR_ZERO; j < 5; j ++) {
    q.xz = Rot2D (q.xz, 0.25 * pi);
    q.xz = abs (q.xz) - 0.75 * s;
    ss = s * s;
    q.xz = mix (q.xz, q.zx, step (q.x, q.z));
    d = min (PrRoundBoxDf (q - vec3 (0., 0.6 * ss - rc, 0.), s * vec3 (0.3, 0.6 * s, 0.3) - rc, rc),
       PrCylDf ((q - vec3 (0., 1.45 * ss - rc, 0.)).xzy, 0.12 * s, 0.25 * ss));
    dMin = min (dMin, d);
    s *= 0.85;
  }
  return 0.9 * dMin;
}

float BrgBldgDf (vec3 p, float dMin)
{
  vec3 q;
  float d;
  q = p;
  q.y -= 0.1 + 0.01 * sin (8. * pi * pR);
  d = max (abs (abs (pR - 5.2) - 1.4) - 0.4, abs (q.y) - 0.1);
  dMin = min (dMin, d);
  q = p;
  q.y -= 1.5;
  d = min (PrCylDf (q.xzy, 2.5, 1.5),
     PrCylDf (vec3 (q.xz, q.y - (2.2 - 0.25 * pR + 0.1 * sin (32. * pi * pA))), 2.8, 0.07));
  q.y -= 2.16;
  d = min (d, PrCylDf (q.xzy, 0.5, 0.22));
  q = p;
  q.xz = Rot2D (q.xz, 2. * pi * (floor (3. * (pA - 0.5) + 0.5) / 3.));
  d = max (d, - PrRoundBoxDf (q - vec3 (-2.5, 0.8, 0.), vec3 (0.7, 0.8, 0.7), rc));
  dMin = min (dMin, d);
  q.x += 5.2;
  q.y -= 0.5 - 0.2 * q.x * q.x;
  d = PrBoxDf (q, vec3 (1.6, 0.1, 0.6));
  q.z = abs (q.z);
  q.yz -= vec2 (0.3, 0.5);
  d = min (d, PrRoundBoxDf (q, vec3 (1.6, 0.3, 0.1) - rc, rc));
  dMin = min (dMin, d);
  return 0.9 * dMin;
}

float PanBldgDf (vec3 p, float dMin)
{
  vec3 q;
  float d;
  p.y -= 1.8;
  q = p;
  d = PrRoundBoxDf (q, vec3 (4.9, 1.6, 2.9) - rc, rc);
  q.y = abs (q.y) - 1.5;
  d = min (d, PrRoundBoxDf (q, vec3 (5.4, 0.1, 3.4) - rc, rc));
  q = p;
  q.y -= -1.7;
  d = min (d, PrRoundBoxDf (q, vec3 (6., 0.1, 4.) - rc, rc));
  dMin = min (dMin, d);
  q = p;
  q.y -= 2.2;
  d = PrCylDf (q.xzy, 1.7, 0.75);
  q.y -= 0.75;
  d = min (d, max (max (PrSphDf (q, 2.), - q.y), 0.2 - pR));
  dMin = min (dMin, d);
  q = p;
  q.xz = mod (q.xz + 0.5, 1.) - 0.5;
  d = max (PrCylDf (q.xzy, 0.2, 1.5), max (abs (p.x) - 5.5, abs (p.z) - 3.5));
  q = p;
  q.xz = Rot2D (q.xz, 2. * pi * (floor (16. * (pA - 0.5) + 0.5) / 16.));
  q.xy -= vec2 (-1.85, 2.2);
  d = min (d, PrCylDf (q.xzy, 0.15, 0.75));
  dMin = min (dMin, d);
  return 0.9 * dMin;
}

float ObjDf (vec3 p)
{
  vec3 q;
  float dMin, d;
  p.xz -= HexToPix (gId * hgSize);
  dMin = dstFar;
  q = p;
  q.xz = Rot2D (q.xz, 2. * pi * (floor (6. * atan (q.z, - q.x) / (2. * pi) + 0.5)) / 6.);
  q.y -= wavHt - 0.05;
  d = SmoothMax (abs (q.x) - 0.48 * sqrt3 * hgSize, q.y, 0.05);
  DMINQ (1);
  if (isOcc) {
    q = p;
    q.xz = Rot2Cs (q.xz, bldCs);
    q.y -= wavHt + 0.35;
    pR = length (q.xz);
    pA = ((pR > 0.) ? atan (q.z, - q.x) / (2. * pi) : 0.) + 0.5;
    rc = 0.05;
    if (! isSh) d = PrCylDf ((q - vec3 (0., 3.8, 0.)).xzy, 8.21, 3.8);
    if (isSh || d < 0.1) {
      if (bldTp <= 4.) {
        if      (bldTp == 1.) d = CasBldgDf (q, dMin);
        else if (bldTp == 2.) d = TwrBldgDf (q, dMin);
        else if (bldTp == 3.) d = PyrBldgDf (q, dMin);
        else /*if (bldTp == 4.)*/ d = TajBldgDf (q, dMin);
      } else if (bldTp <= 7.) {
        if      (bldTp == 5.) d = PisBldgDf (q, dMin);
        else if (bldTp == 6.) d = FrtBldgDf (q, dMin);
        else /*if (bldTp == 7.)*/ d = WvnBldgDf (q, dMin);
      } else /*if (bldTp <= 10.)*/ {
        if      (bldTp == 8.) d = PstBldgDf (q, dMin);
        else if (bldTp == 9.) d = BrgBldgDf (q, dMin);
        else if (bldTp == 10.) d = PanBldgDf (q, dMin);
      }
      DMINQ (2);
    } else dMin = min (dMin, d);
    q.y -= -0.2;
    d = PrRoundCylDf (q.xzy, 8.2 - rc, rc, 0.15 - rc);
    DMINQ (3);
  }
  return dMin;
}

void SetGrObjConf ()
{
  vec2 p, u, fRand;
  p = HexToPix (gId * hgSize);
  u = mod (0.1 * vec2 (p.x + p.y, p.x - p.y) * (1. + 0.4 * sin (0.2 * 2. * pi * p)) +
     0.1 * tCur, 1.) - 0.5;
  wavHt = dot (exp (-100. * u * u), vec2 (1.));
  fRand = Hashv2v2 (gId * vec2 (37.31, 43.11) + 27.11);
  isOcc = (fRand.y > emFrac);
  if (isOcc) {
    bldTp = 1. + floor (10. * (fRand.y - emFrac) / (1. - emFrac));
    bldCs = sin (2. * pi * fRand.x + vec2 (0.5 * pi, 0.));
  }
}

float ObjRay (vec3 ro, vec3 rd)
{
  vec3 vri, vf, hv, p;
  vec2 edN[3], pM, gIdP;
  float dHit, d, s, eps;
  eps = 0.005;
  edN[0] = vec2 (1., 0.);
  edN[1] = 0.5 * vec2 (1., sqrt3);
  edN[2] = 0.5 * vec2 (1., - sqrt3);
  for (int k = 0; k < 3; k ++) edN[k] *= sign (dot (edN[k], rd.xz));
  vri = hgSize / vec3 (dot (rd.xz, edN[0]), dot (rd.xz, edN[1]), dot (rd.xz, edN[2]));
  vf = 0.5 * sqrt3 - vec3 (dot (ro.xz, edN[0]), dot (ro.xz, edN[1]),
     dot (ro.xz, edN[2])) / hgSize;
  pM = HexToPix (PixToHex (ro.xz / hgSize));
  gIdP = vec2 (-999.);
  dHit = 0.;
  for (int j = VAR_ZERO; j < 220; j ++) {
    hv = (vf + vec3 (dot (pM, edN[0]), dot (pM, edN[1]), dot (pM, edN[2]))) * vri;
    s = Minv3 (hv);
    p = ro + dHit * rd;
    gId = PixToHex (p.xz / hgSize);
    if (gId != gIdP) {
      gIdP = gId;
      SetGrObjConf ();
    }
    d = ObjDf (p);
    if (dHit + d < s) {
      dHit += d;
    } else {
      dHit = s + eps;
      pM += sqrt3 * ((s == hv.x) ? edN[0] : ((s == hv.y) ? edN[1] : edN[2]));
    }
    if (d < eps || dHit > dstFar) break;
  }
  if (d >= eps) dHit = dstFar;
  return dHit;
}

vec3 ObjNf (vec3 p)
{
  vec4 v;
  vec2 e;
  e = vec2 (0.0002, -0.0002);
  for (int j = VAR_ZERO; j < 4; j ++) {
    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));
  }
  v.x = - v.x;
  return normalize (2. * v.yzw - dot (v, vec4 (1.)));
}

float ObjSShadow (vec3 ro, vec3 rd)
{
  vec3 p;
  vec2 gIdP;
  float sh, d, h;
  int idObjT;
  isSh = true;
  idObjT = idObj;
  sh = 1.;
  gIdP = vec2 (-999.);
  d = 0.01;
  for (int j = VAR_ZERO; j < 30; j ++) {
    p = ro + d * rd;
    gId = PixToHex (p.xz / hgSize);
    if (gId != gIdP) {
      gIdP = gId;
      SetGrObjConf ();
    }
    h = ObjDf (p);
    sh = min (sh, smoothstep (0., 0.05 * d, h));
    d += h;
    if (sh < 0.05 || d > 2. * hgSize) break;
  }
  idObj = idObjT;
  isSh = false;
  return 0.8 + 0.2 * sh;
}

float BgCol (vec3 rd)
{
  vec3 col;
  vec2 u;
  float el, f;
  rd.xz = Rot2D (rd.xz, 0.01 * tCur);
  el = asin (rd.y);
  u = vec2 (atan (rd.z, - rd.x) + pi, tan (2. * atan (0.5 * el))) / (2. * pi);
  f = 64.;
  col = mix (vec3 (0., 0.1, 0.3), vec3 (0.8), mix (Fbm2 (f * u),
     Fbm2 (f * (u - vec2 (1., 0.))), u.x));
  col = mix (col, vec3 (0.2, 0.3, 0.4), smoothstep (0.95, 0.98, abs (el) / (0.5 * pi)));
  f = Maxv3 (col);
  return f * sqrt (f);
}

vec3 ShowScene (vec3 ro, vec3 rd)
{
  vec4 col4;
  vec3 col, bgCol, vn, vnn;
  vec2 vf;
  float dstObj, nDotL, sh, glit;
  bgCol = BgCol (rd) * vec3 (1., 1., 0.3);
  emFrac = 0.02;
  isSh = false;
  dstObj = ObjRay (ro, rd);
  if (dstObj < dstFar) {
    ro += dstObj * rd;
    gId = PixToHex (ro.xz / hgSize);
    SetGrObjConf ();
    vn = ObjNf (ro);
    vf = vec2 (0.);
    if (idObj == 1) {
      if (vn.y > 0.5) {
        col4 = vec4 (0.2, 0.4, 0.2, 0.1) * (0.8 + 0.2 * Fbm2 (ro.xz));
        if (isOcc) col4 = mix (vec4 (0.4, 0.3, 0., 0.1), col4,
           smoothstep (8.2, 8.25, length (ro.xz - HexToPix (gId * hgSize))));
        vf = vec2 (4., 1.);
      } else col4 = vec4 (0.1, 0.3, 0.1, 0.) * (0.9 + 0.1 * sin (4. * pi * qHit.y));
    } else if (idObj == 2) {
      col4 = vec4 (0.7, 0.7, 0.1, 0.2);
      vf = vec2 (512., 8.);
    } else if (idObj == 3) {
      col4 = vec4 (0.5, 0.4, 0.1, 0.1);
      vf = vec2 (8., 0.5);
    }
    if (vf.y > 0.) {
      vnn = VaryNf (vf.x * qHit, vn, vf.y);
      if (idObj != 2) vn = vnn;
    }
    nDotL = max (dot (vn, ltDir), 0.);
    if (idObj == 2) nDotL *= nDotL;
    sh = (idObj != 2) ? ObjSShadow (ro + 0.1 * vn, ltDir) : 1.;
    col = col4.rgb * (0.2 + 0.2 * max (- dot (vn, ltDir), 0.) + 0.8 * sh * nDotL) +
       step (0.95, sh) * col4.a * pow (max (dot (reflect (ltDir, vn), rd), 0.), 32.);
    if (idObj == 2) {
      col = mix (col, BgCol (reflect (rd, vn)) * vec3 (1., 1., 0.3), 0.3);
      glit = 32. * pow (max (0., dot (ltDir, reflect (rd, vn))), 16.) *
         pow (1. - 0.6 * abs (dot (normalize (ltDir - rd), vnn)), 8.);
      col += vec3 (1., 1., 0.8) * glit;
    }
    col = mix (col, bgCol, smoothstep (0.5, 1., dstObj / dstFar));
  } else col = (0.1 + 0.9 * step (-0.1, rd.y)) * bgCol;
  return clamp (col, 0., 1.);
}

vec3 TrackPath (float t)
{
  return vec3 (dot (trkA, sin (trkF * t)), dot (trkA.yx, cos (trkF * t)), t);
}

vec3 TrackVel (float t)
{
  return vec3 (dot (trkF * trkA, cos (trkF * t)), dot (trkF * trkA.yx, - sin (trkF * t)), 1.);
}

void main( void )

{
  mat3 vuMat;
  vec4 mPtr;
  vec3 ro, rd, vd, col;
  vec2 canvas, uv, uvv;
  float el, az, zmFac, asp, sr, vFly;
  canvas = iResolution.xy;
  uv = 2. * fragCoord.xy / canvas - 1.;
  uv.x *= canvas.x / canvas.y;
  tCur = iTime;
  mPtr = iMouse;
  mPtr.xy = mPtr.xy / canvas - 0.5;
  asp = canvas.x / canvas.y;
  tCur = mod (tCur, 1200.);
  hgSize = 11.;
  az = 0.;
  el = -0.15 * pi;
  if (mPtr.z > 0.) {
    az += 2. * pi * mPtr.x;
    el += 0.2 * pi * mPtr.y;
  } else {
    az += 0.2 * pi * sin (0.02 * pi * tCur);
  }
  trkF = 0.2 * vec2 (0.1, 0.17);
  trkA = 2. * vec2 (1.25, 0.45);
  vFly = 3.;
  ro = TrackPath (vFly * tCur);
  ro.xy += vec2 (3.5, 30.);
  vd = normalize (TrackVel (vFly * tCur));
  el += asin (vd.y);
  az += atan (vd.x, vd.z);
  el = clamp (el, -0.25 * pi, -0.12 * pi);
  vuMat = StdVuMat (el, az);
  zmFac = 3.;
  dstFar = 500.;
  ltDir = vuMat * normalize (vec3 (1., 0.7, -1.));
#if ! AA
  const float naa = 1.;
#else
  const float naa = 3.;
#endif  
  col = vec3 (0.);
  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;
  for (float a = float (VAR_ZERO); a < naa; a ++) {
    uvv = (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.), sr * (0.667 * a + 0.5) *
       pi)) / zmFac;
    rd = vuMat * normalize (vec3 (2. * tan (0.5 * atan (uvv.x / asp)) * asp, uvv.y, 1.));
    col += (1. / naa) * ShowScene (ro, rd);
  }
  fragColor = vec4 (pow (col, vec3 (0.8)), 1.);
}

float PrBoxDf (vec3 p, vec3 b)
{
  vec3 d;
  d = abs (p) - b;
  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));
}

float PrRoundBoxDf (vec3 p, vec3 b, float r)
{
  return length (max (abs (p) - b, 0.)) - r;
}

float PrRoundBox2Df (vec2 p, vec2 b, float r)
{
  return length (max (abs (p) - b, 0.)) - r;
}

float PrSphDf (vec3 p, float r)
{
  return length (p) - r;
}

float PrCylDf (vec3 p, float r, float h)
{
  return max (length (p.xy) - r, abs (p.z) - h);
}

float PrCylAnDf (vec3 p, float r, float w, float h)
{
  return max (abs (length (p.xy) - r) - w, abs (p.z) - h);
}

float PrRoundCylDf (vec3 p, float r, float rt, float h)
{
  return length (max (vec2 (length (p.xy) - r, abs (p.z) - h), 0.)) - rt;
}

float PrCapsDf (vec3 p, float r, float h)
{
  return length (p - vec3 (0., 0., clamp (p.z, - h, h))) - r;
}

vec2 PixToHex (vec2 p)
{
  vec3 c, r, dr;
  c.xz = vec2 ((1./sqrt3) * p.x - (1./3.) * p.y, (2./3.) * p.y);
  c.y = - c.x - c.z;
  r = floor (c + 0.5);
  dr = abs (r - c);
  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));
  return r.xz;
}

vec2 HexToPix (vec2 h)
{
  return vec2 (sqrt3 * (h.x + 0.5 * h.y), (3./2.) * h.y);
}

float Minv3 (vec3 p)
{
  return min (p.x, min (p.y, p.z));
}

float Maxv3 (vec3 p)
{
  return max (p.x, max (p.y, p.z));
}

float SmoothMin (float a, float b, float r)
{
  float h;
  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);
  return mix (b - h * r, a, h);
}

float SmoothMax (float a, float b, float r)
{
  return - SmoothMin (- a, - b, r);
}

mat3 StdVuMat (float el, float az)
{
  vec2 ori, ca, sa;
  ori = vec2 (el, az);
  ca = cos (ori);
  sa = sin (ori);
  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *
         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);
}
vec2 Rot2D (vec2 q, float a)
{
  vec2 cs;
  cs = sin (a + vec2 (0.5 * pi, 0.));
  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));
}

vec2 Rot2Cs (vec2 q, vec2 cs)
{
  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));
}

const float cHashM = 43758.54;

vec2 Hashv2v2 (vec2 p)
{
  vec2 cHashVA2 = vec2 (37., 39.);
  return fract (sin (dot (p, cHashVA2) + vec2 (0., cHashVA2.x)) * cHashM);
}

float Noisefv2 (vec2 p)
{
  vec2 t, ip, fp;
  ip = floor (p);  
  fp = fract (p);
  fp = fp * fp * (3. - 2. * fp);
  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);
  return mix (t.x, t.y, fp.x);
}

float Fbm2 (vec2 p)
{
  float f, a;
  f = 0.;
  a = 1.;
  for (int j = 0; j < 5; j ++) {
    f += a * Noisefv2 (p);
    a *= 0.5;
    p *= 2.;
  }
  return f * (1. / 1.9375);
}

float Fbmn (vec3 p, vec3 n)
{
  vec3 s;
  float a;
  s = vec3 (0.);
  a = 1.;
  for (int j = 0; j < 5; j ++) {
    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));
    a *= 0.5;
    p *= 2.;
  }
  return dot (s, abs (n));
}

vec3 VaryNf (vec3 p, vec3 n, float f)
{
  vec4 v;
  vec3 g;
  vec2 e = vec2 (0.1, 0.);
  for (int j = VAR_ZERO; j < 4; j ++)
     v[j] = Fbmn (p + ((j < 2) ? ((j == 0) ? e.xyy : e.yxy) : ((j == 2) ? e.yyx : e.yyy)), n);
  g = v.xyz - v.w;
  return normalize (n + f * (g - n * dot (n, g)));
}
}
