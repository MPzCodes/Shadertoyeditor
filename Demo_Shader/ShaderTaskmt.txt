//https://www.shadertoy.com/view/wssSWj
//ShaderTaskmt

#version 330
uniform float iTime;
uniform vec2 iResolution;
uniform vec2 iMouse;
out vec4 fragColor;

 #define MAX_STEPS 150
#define MAX_DISTANCE 100.
#define SURFACE_DIST 0.0084
bool cylinder=false,cube=false; 
float Capsule(vec3 p,vec3 a,vec3 b,float r)
{
 vec3 abd=b-a;
 vec3 apd=p-a;
    float tr=dot(abd,apd)/dot(abd,abd);
    tr=clamp(tr,0.,1.);
    vec3 m=a+tr*abd;
    return(length(p-m)-r);
    
}
float  Cylinder(vec3 p,vec3 a,vec3 b,float radius)
{
 vec3 abd=b-a;
 vec3 apd=p-a;
    float tr=dot(abd,apd)/dot(abd,abd);
     
    vec3 c=a+tr*abd;
    float x=length(p-c)-radius;
    float y=(abs(tr-0.5)-0.5)*length(abd);
        float e=length(max(vec2(x,y),0.));
    return e;
    return(length(p-c)-radius);
    
}
float  Torus(vec3 p ,vec2 radius)
{
  float x=length(p.xz)-radius.x;
  return length(vec2(x,p.y))-radius.y;
}
float dBox(vec3 p,vec3 s)
{
    return length(max(abs(p)-s,0.));
    
}
float GetDistance(vec3 p)
{
    
 vec4 s=vec4(3,2,8,0.7);   
 float sphereDist=length(p-s.xyz)-s.w;
 float planeDist=p.y;
 float cd=Capsule(p,vec3(0,1,6),vec3(1,2,6),0.2);
    float td=Torus(p-vec3(0.2,0.6,12),vec2(1.5,0.5));
    float bd=dBox(p-vec3(-2.,0.5,6),vec3(.5));
    float cyld=Cylinder(p,vec3(0,1,3),vec3(3,0.3,4),0.2);
 float d=min(cd,planeDist);
    d=min(d,td);
    d=min(d,bd);
    d=min(d,sphereDist);
    d=min(d,cyld);
    if (d==bd)
        cube=true;
    if (d==cd)
        cylinder=true;
    return d;
}
 
float RayMarch(vec3 ro,vec3 rd)
{
 float dO=0.; 
    for (int i=0;i<MAX_STEPS;i++)
    {
        vec3 p=ro+rd*dO;
        float dS=GetDistance(p);
        dO+=dS;
        if(dO>MAX_DISTANCE||dS<SURFACE_DIST)
            break;
        
    }
    
    return dO;
    
}
 
 
vec3  Normal(vec3 p)
{
 float d=GetDistance(p);
 vec2 e=vec2(0.01,0);
 vec3 n=d-vec3(
     GetDistance(p-e.xyy),
     GetDistance(p-e.yxy),
     GetDistance(p-e.yyx)
         );    
    return normalize(n);
}
 
float GetL(vec3 p)
{
    vec3 lightPos=vec3(0,6,6);
    vec3 lightPos2=vec3(3,5,17);
    lightPos.xz+=vec2(sin(iTime),cos(iTime))*3.;
    vec3 l=normalize(lightPos-p);
    vec3 l2=normalize(lightPos2-p);
    vec3 n= Normal(p);
    float diff,diff2;
    if (cube==true)
    {
      diff=clamp(dot(n,l),0.,0.3);
     diff2=clamp(dot(n,l2),0.,0.3);
    }else if (cylinder==true)
    { diff=clamp(dot(n,l),0.,0.7);
     diff2=clamp(dot(n,l2),0.,0.7);
    } else
    {
        diff=clamp(dot(n,l),0.,1.);
     diff2=clamp(dot(n,l2),0.,1.);
        
    }
    float d=RayMarch(p+n*SURFACE_DIST*2.,l);
    float d2=RayMarch(p+n*SURFACE_DIST*2.,l2);
    if(d<length(lightPos-p))
    diff*=0.1;
    if(d2<length(lightPos2-p))
    diff2*=0.1;
    return (diff+diff2);
    
}
 
void main( void ) {
	 vec2  fragCoord = gl_FragCoord.xy;
     
    vec2 uv = (fragCoord-0.35*iResolution.xy)/iResolution.y;

      vec3 col=vec3(0.0);
    vec3 ro=vec3(0,0.73,0);
     
    vec3 rd=normalize(vec3(uv.x,uv.y,1));
    float dd=RayMarch(ro,rd);
     
    vec3 p=ro+rd*dd;
     
    float diff=GetL(p);
    col=vec3(diff);
    
    
    
     
    fragColor=vec4(col,1.0);
}
