#version 330
uniform float iTime;
uniform vec2 iResolution;
uniform vec2 iMouse;
out vec4 fragColor;


#define MAX_ITER_SM 50
#define MAX_ITER_FRACTAL 10
#define M_PI 3.14159265358979323846 
struct ray {
	vec3 o;
    vec3 d;
};
struct sphere{
	vec3 o;
    float size;
};
struct intersection{
    vec3 n;
};

float de(vec3 x){	 
    float power = 8.0f;
    vec3 z = x;
    float dr = 1.0f;
    float r = 0.0f;
    for (int i = 0; i <5 ; i++) {
        r = length(z);
        if (r>2.0f) break;

        float phi = asin(z.z/r);
        float theta = atan(z.y,z.x);
        dr =  pow( abs(r), power-1.0f)*power*dr + 1.0f;

        float zr = pow( abs(r),power);

        phi = phi*power;
        theta = theta*power;

        z = vec3(cos(theta)*cos(phi), sin(phi)*cos(theta), -sin(theta))*zr;
        z = z+x;
    }
    return 0.5*log(r)*r/dr;
}


float de(vec3 x, float power){	 
    vec3 z = x;
    float dr = 1.0f;
    float r = 0.0f;
    for (int i = 0; i < MAX_ITER_FRACTAL ; i++) {
        r = length(z);
        if (r>2.0f) break;
        float phi = asin(z.z/r);
        float theta = atan(z.y,z.x);
        dr =  dr*pow( abs(r), power-1.0f)*power + 1.0f;
        float zr = pow( abs(r),power);
        phi = phi*power;
        theta = theta*power;
        z = vec3(cos(theta)*cos(phi), sin(theta)*cos(phi), -sin(phi))*zr;
        z = z+x;
    }
    return 0.5*log(r)*r/dr;
}
vec3 grad(vec3 x){
    vec3 dx = vec3(1e-3f,0,0);
    vec3 dy = vec3(0,1e-3f,0);
    vec3 dz = vec3(0,0,1e-3f);
	return vec3((de(x+dx)-de(x))*1e3f,(de(x+dy)-de(x))*1e3f,(de(x+dz)-de(x))*1e3f);
}
struct sm_ret{
	float t;
    int it;
};
sm_ret spheremarch(ray r, float minT, float maxT, float power){
    int i;
    sm_ret ret;
	float t = minT;
    while(i<MAX_ITER_SM && t<maxT){
        vec3 x = r.o + r.d*t;
        float dist = de(x, power);
        t+=dist;
        if(dist<1e-4){
        	break;
        }
       	i++;
    	
    }
	if(i==MAX_ITER_SM || t>=maxT)
        t = maxT+1.0f;

    ret.t = t;
    ret.it = i;
	return ret;
}
    

void main( void ) {
	 vec2  fragCoord = gl_FragCoord.xy;
    
    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = fragCoord/iResolution.xy;
    float aspect = iResolution.x/iResolution.y;

	float theta = (iMouse.x/iResolution.x-0.5f)*2.0f*M_PI;
	float phi = iMouse.y/iResolution.y*M_PI;
    mat3 rot;
    
    float a = cos(-theta);
    float b = sin(-theta);
    float c = cos(phi);
    float d = sin(phi);
    
    rot[0][0]=a;
    rot[1][0]=-b*c;
    rot[2][0]= b*d;
    rot[0][1]= b;
    rot[1][1]= a*c;
    rot[2][1]= -a*d;
    rot[0][2]= 0.0f;
    rot[1][2]= d;
    rot[2][2]= c;
    
  	ray r;
    r.o.x=0.0f;
    r.o.y=0.0f;
    r.o.z=2.0f;
    
	r.d.x = (uv.x-0.5f)*aspect;
    r.d.y = uv.y-0.5f;
    r.d.z = -1.0f;
    
    r.o = rot*r.o;
    r.d = rot*r.d;
    
    r.d = normalize(r.d);
    float power = (cos(iTime*0.2f)+1.0f)*0.5f*6.0f+2.0f;
	vec3 col;
    sm_ret ret= spheremarch(r,0.01f, 8.0f, power);
    if(ret.t<8.0f){
       	// vec3 normal = grad(r.o + ret.t*r.d);
       	//col.x=col.y=col.z=max(dot(normal,normalize(vec3(1.0f,1.0f,1.0f))),0.0f);
		col.x = col.y = col.z = 1.0f-float(ret.it)/float(MAX_ITER_SM);
    }
    // Output to screen
    fragColor = vec4(col,1.0);
}
